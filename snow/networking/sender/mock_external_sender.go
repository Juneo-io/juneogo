// Code generated by MockGen. DO NOT EDIT.
// Source: snow/networking/sender/external_sender.go
//
// Generated by this command:
//
//	mockgen -source=snow/networking/sender/external_sender.go -destination=snow/networking/sender/mock_external_sender.go -package=sender -exclude_interfaces=
//

// Package sender is a generated GoMock package.
package sender

import (
	reflect "reflect"

	ids "github.com/Juneo-io/juneogo/ids"
	message "github.com/Juneo-io/juneogo/message"
	supernets "github.com/Juneo-io/juneogo/supernets"
	set "github.com/Juneo-io/juneogo/utils/set"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalSender is a mock of ExternalSender interface.
type MockExternalSender struct {
	ctrl     *gomock.Controller
	recorder *MockExternalSenderMockRecorder
}

// MockExternalSenderMockRecorder is the mock recorder for MockExternalSender.
type MockExternalSenderMockRecorder struct {
	mock *MockExternalSender
}

// NewMockExternalSender creates a new mock instance.
func NewMockExternalSender(ctrl *gomock.Controller) *MockExternalSender {
	mock := &MockExternalSender{ctrl: ctrl}
	mock.recorder = &MockExternalSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalSender) EXPECT() *MockExternalSenderMockRecorder {
	return m.recorder
}

// Gossip mocks base method.
func (m *MockExternalSender) Gossip(msg message.OutboundMessage, supernetID ids.ID, numValidatorsToSend, numNonValidatorsToSend, numPeersToSend int, allower supernets.Allower) set.Set[ids.NodeID] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gossip", msg, supernetID, numValidatorsToSend, numNonValidatorsToSend, numPeersToSend, allower)
	ret0, _ := ret[0].(set.Set[ids.NodeID])
	return ret0
}

// Gossip indicates an expected call of Gossip.
func (mr *MockExternalSenderMockRecorder) Gossip(msg, supernetID, numValidatorsToSend, numNonValidatorsToSend, numPeersToSend, allower any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gossip", reflect.TypeOf((*MockExternalSender)(nil).Gossip), msg, supernetID, numValidatorsToSend, numNonValidatorsToSend, numPeersToSend, allower)
}

// Send mocks base method.
func (m *MockExternalSender) Send(msg message.OutboundMessage, nodeIDs set.Set[ids.NodeID], supernetID ids.ID, allower supernets.Allower) set.Set[ids.NodeID] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", msg, nodeIDs, supernetID, allower)
	ret0, _ := ret[0].(set.Set[ids.NodeID])
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockExternalSenderMockRecorder) Send(msg, nodeIDs, supernetID, allower any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockExternalSender)(nil).Send), msg, nodeIDs, supernetID, allower)
}
